/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                     *
 * Copyright (c) 2019-2019, De Graef Group, Carnegie Mellon University *
 * All rights reserved.                                                *
 *                                                                     *
 * Author: William C. Lenthe                                           *
 *                                                                     *
 * This package is free software; you can redistribute it and/or       *
 * modify it under the terms of the GNU General Public License as      *
 * published by the Free Software Foundation; either version 2 of the  *
 * License, or (at your option) any later version.                     *
 *                                                                     *
 * This program is distributed in the hope that it will be useful,     *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
 * GNU General Public License for more details.                        *
 *                                                                     *
 * You should have received a copy of the GNU General Public License   *
 * along with this program; if not, check the Free Software Foundation *
 * website: <https://www.gnu.org/licenses/old-licenses/gpl-2.0.html>   *
 *                                                                     *
 *                                                                     *
 * Interested in a commercial license? Contact:                        *
 *                                                                     *
 * Center for Technology Transfer and Enterprise Creation              *
 * 4615 Forbes Avenue, Suite 302                                       *
 * Pittsburgh, PA 15213                                                *
 *                                                                     *
 * phone. : 412.268.7393                                               *
 * email  : innovation@cmu.edu                                         *
 * website: https://www.cmu.edu/cttec/                                 *
 *                                                                     *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


////////////////////////////////////////////////////////////////////////
//        test program for functions in include/sht/wigner.hpp        //
////////////////////////////////////////////////////////////////////////

#include <iostream>

namespace emsphinx {

	namespace wigner {
		//@brief   : test d^j_{k,m}(\beta) functions
		//@param os: output stream to write error messages to
		//@return  : true/false if the functions are consistent with precomputed values from mathematica's WignerD[{j,k,m},\beta]
		//@note    : functions tested
		//             -             Real  d(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB)
		//             -             Real  d(const int j, const int k, const int m)
		//             -             int   dSign(const int j, const int k, const int m)
		//             -std::complex<Real> D(const int64_t j, const int64_t k, const int64_t m, Real const * const eu)
		template <typename Real> bool testDjkm(std::ostream& os);

		//@brief   : test all the table functions
		//@param j : max degree in (d/dBeta)^2 d^j_{k,m}(beta)
		//@param os: output stream to write error messages to
		//@return  : true/false if the table functions are consistent with the single point recursive functions
		//@note    : functions tested
		//             -void dTable(const size_t jMax, const Real t, const bool nB, Real * const table)
		//             -void dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB)
		//             -void dTablePreBuild(const size_t jMax, Real * const pE, Real * const pW, Real * const pB)
		//             -void dTable(const size_t jMax, Real * const table, const bool trans = false)
		template <typename Real> bool testTables(const int64_t bw, std::ostream& os);

		//@brief   : test functions for derivatives of d^j_{k,m}(\beta)
		//@param os: output stream to write error messages to
		//@return  : true/false if the functions are consistent with precomputed values from mathematica's D[WignerD[{j,k,m},\beta],{\beta, (1 or 2)}]
		//@note    : functions tested
		//             -Real dPrime(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB);
		//             -Real dPrime2(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB);
		template <typename Real> bool testDerivatives(std::ostream& os);

		//@brief   : run all wigner unit tests
		//@param os: output stream to write error messages to
		//@return  : true/false if the self tests pass/fail
		//@note    : there isn't currently a unit test for rotateHarmonics
		template <typename Real> bool runTests(std::ostream& os);
	}

}


int main() {
	//select output stream
	std::ostream& os = std::cout;

	//run unit tests
	const bool passed =  emsphinx::wigner::runTests<float >(os)
	                  && emsphinx::wigner::runTests<double>(os);

	//return result
	return passed ? EXIT_SUCCESS : EXIT_FAILURE;
}

#include <iomanip>
#include <limits>

#include "sht/wigner.hpp"

namespace emsphinx {
	
	namespace wigner {
		//@brief   : test d^j_{k,m}(\beta) functions
		//@param os: output stream to write error messages to
		//@return  : true/false if the functions are consistent with precomputed values from mathematica's WignerD[{j,k,m},\beta]
		//@note    : functions tested
		//             -             Real  d(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB)
		//             -             Real  d(const int j, const int k, const int m)
		//             -             int   dSign(const int j, const int k, const int m)
		//             -std::complex<Real> D(const int64_t j, const int64_t k, const int64_t m, Real const * const eu)
		template <typename Real> bool testDjkm(std::ostream& os) {
			os << "testing single point wigner d functions\n";

			//start by tabulating some values from mathematica
			//these are from mathematica: N[ Table[WignerD[{j, k, m}, Pi/2], {j, 0L, x}, {k, -x, x}, {m, -x, x}] , 32] where x == Num-1
			const int Num = 5;//table size

			//beta = pi/2
			long double tab12[Num][2*Num+1][2*Num+1] = { // j, k, m with j in [0L,Num) and k/m in (-Num,Num)
				{//j == 0
					// m == -4                          , -3                                 , -2                                 , -1                                  ,  0                                ,  1                                 ,  2                                 ,  3                                 ,  4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  1.0000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                 ,  NAN                               ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L, -0.70710678118654752440084436210485L,  0.50000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.70710678118654752440084436210485L,  0.00000000000000000000000000000000L, -0.70710678118654752440084436210485L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L,  0.70710678118654752440084436210485L,  0.50000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L, -0.50000000000000000000000000000000L,  0.61237243569579452454932101867647L, -0.50000000000000000000000000000000L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L, -0.50000000000000000000000000000000L,  0.00000000000000000000000000000000L,  0.50000000000000000000000000000000L, -0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  0.61237243569579452454932101867647L,  0.00000000000000000000000000000000L, -0.50000000000000000000000000000000L,  0.00000000000000000000000000000000L,  0.61237243569579452454932101867647L,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L,  0.50000000000000000000000000000000L,  0.00000000000000000000000000000000L, -0.50000000000000000000000000000000L, -0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L,  0.50000000000000000000000000000000L,  0.61237243569579452454932101867647L,  0.50000000000000000000000000000000L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  0.12500000000000000000000000000000L, -0.30618621784789726227466050933824L,  0.48412291827592711064740817497280L, -0.55901699437494742410229341718282L,  0.48412291827592711064740817497280L, -0.30618621784789726227466050933824L,  0.12500000000000000000000000000000L,  NAN                                },// k == -3
					{ NAN                                ,  0.30618621784789726227466050933824L, -0.50000000000000000000000000000000L,  0.39528470752104741649986169305409L,  0.00000000000000000000000000000000L, -0.39528470752104741649986169305409L,  0.50000000000000000000000000000000L, -0.30618621784789726227466050933824L,  NAN                                },// k == -2
					{ NAN                                ,  0.48412291827592711064740817497280L, -0.39528470752104741649986169305409L, -0.12500000000000000000000000000000L,  0.43301270189221932338186158537647L, -0.12500000000000000000000000000000L, -0.39528470752104741649986169305409L,  0.48412291827592711064740817497280L,  NAN                                },// k == -1
					{ NAN                                ,  0.55901699437494742410229341718282L,  0.00000000000000000000000000000000L, -0.43301270189221932338186158537647L,  0.00000000000000000000000000000000L,  0.43301270189221932338186158537647L,  0.00000000000000000000000000000000L, -0.55901699437494742410229341718282L,  NAN                                },// k ==  0
					{ NAN                                ,  0.48412291827592711064740817497280L,  0.39528470752104741649986169305409L, -0.12500000000000000000000000000000L, -0.43301270189221932338186158537647L, -0.12500000000000000000000000000000L,  0.39528470752104741649986169305409L,  0.48412291827592711064740817497280L,  NAN                                },// k ==  1
					{ NAN                                ,  0.30618621784789726227466050933824L,  0.50000000000000000000000000000000L,  0.39528470752104741649986169305409L,  0.00000000000000000000000000000000L, -0.39528470752104741649986169305409L, -0.50000000000000000000000000000000L, -0.30618621784789726227466050933824L,  NAN                                },// k ==  2
					{ NAN                                ,  0.12500000000000000000000000000000L,  0.30618621784789726227466050933824L,  0.48412291827592711064740817497280L,  0.55901699437494742410229341718282L,  0.48412291827592711064740817497280L,  0.30618621784789726227466050933824L,  0.12500000000000000000000000000000L,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 4
					{ 0.06250000000000000000000000000000L, -0.17677669529663688110021109052621L,  0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L,  0.52291251658379721748635751611574L, -0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L, -0.17677669529663688110021109052621L,  0.06250000000000000000000000000000L},// k == -4
					{ 0.17677669529663688110021109052621L, -0.37500000000000000000000000000000L,  0.46770717334674267319796859153957L, -0.33071891388307382381270196920491L,  0.00000000000000000000000000000000L,  0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L,  0.37500000000000000000000000000000L, -0.17677669529663688110021109052621L},// k == -3
					{ 0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L,  0.25000000000000000000000000000000L,  0.17677669529663688110021109052621L, -0.39528470752104741649986169305409L,  0.17677669529663688110021109052621L,  0.25000000000000000000000000000000L, -0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L},// k == -2
					{ 0.46770717334674267319796859153957L, -0.33071891388307382381270196920491L, -0.17677669529663688110021109052621L,  0.37500000000000000000000000000000L,  0.00000000000000000000000000000000L, -0.37500000000000000000000000000000L,  0.17677669529663688110021109052621L,  0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L},// k == -1
					{ 0.52291251658379721748635751611574L,  0.00000000000000000000000000000000L, -0.39528470752104741649986169305409L,  0.00000000000000000000000000000000L,  0.37500000000000000000000000000000L,  0.00000000000000000000000000000000L, -0.39528470752104741649986169305409L,  0.00000000000000000000000000000000L,  0.52291251658379721748635751611574L},// k ==  0
					{ 0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L, -0.17677669529663688110021109052621L, -0.37500000000000000000000000000000L,  0.00000000000000000000000000000000L,  0.37500000000000000000000000000000L,  0.17677669529663688110021109052621L, -0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L},// k ==  1
					{ 0.33071891388307382381270196920491L,  0.46770717334674267319796859153957L,  0.25000000000000000000000000000000L, -0.17677669529663688110021109052621L, -0.39528470752104741649986169305409L, -0.17677669529663688110021109052621L,  0.25000000000000000000000000000000L,  0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L},// k ==  2
					{ 0.17677669529663688110021109052621L,  0.37500000000000000000000000000000L,  0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L,  0.00000000000000000000000000000000L, -0.33071891388307382381270196920491L, -0.46770717334674267319796859153957L, -0.37500000000000000000000000000000L, -0.17677669529663688110021109052621L},// k ==  3
					{ 0.06250000000000000000000000000000L,  0.17677669529663688110021109052621L,  0.33071891388307382381270196920491L,  0.46770717334674267319796859153957L,  0.52291251658379721748635751611574L,  0.46770717334674267319796859153957L,  0.33071891388307382381270196920491L,  0.17677669529663688110021109052621L,  0.06250000000000000000000000000000L} // k ==  4
				}
			};

			// \beta = pi / 3
			long double tab13[Num][2*Num+1][2*Num+1] = {
				{  //j == 0
					// m == -4                          , -3                                 , -2                                 , -1                                  ,  0                                ,  1                                 ,  2                                 ,  3                                 ,  4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  1.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.75000000000000000000000000000000L, -0.61237243569579452454932101867647L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.61237243569579452454932101867647L,  0.50000000000000000000000000000000L, -0.61237243569579452454932101867647L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L,  0.61237243569579452454932101867647L,  0.75000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  0.56250000000000000000000000000000L, -0.64951905283832898507279237806470L,  0.45927932677184589341199076400735L, -0.21650635094610966169093079268823L,  0.06250000000000000000000000000000L,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  0.64951905283832898507279237806470L,  0.00000000000000000000000000000000L, -0.53033008588991064330063327157864L,  0.50000000000000000000000000000000L, -0.21650635094610966169093079268823L,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  0.45927932677184589341199076400735L,  0.53033008588991064330063327157864L, -0.12500000000000000000000000000000L, -0.53033008588991064330063327157864L,  0.45927932677184589341199076400735L,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  0.21650635094610966169093079268823L,  0.50000000000000000000000000000000L,  0.53033008588991064330063327157864L,  0.00000000000000000000000000000000L, -0.64951905283832898507279237806470L,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  0.06250000000000000000000000000000L,  0.21650635094610966169093079268823L,  0.45927932677184589341199076400735L,  0.64951905283832898507279237806470L,  0.56250000000000000000000000000000L,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  0.42187500000000000000000000000000L, -0.59662134662614947371321243052597L,  0.54463828306041799947833419684440L, -0.36309218870694533298555613122960L,  0.18154609435347266649277806561480L, -0.06629126073623883041257915894733L,  0.01562500000000000000000000000000L,  NAN                                },// k == -3
					{ NAN                                ,  0.59662134662614947371321243052597L, -0.28125000000000000000000000000000L, -0.25674494883054661568295458568788L,  0.51348989766109323136590917137575L, -0.42790824805091102613825764281313L,  0.21875000000000000000000000000000L, -0.06629126073623883041257915894733L,  NAN                                },// k == -2
					{ NAN                                ,  0.54463828306041799947833419684440L,  0.25674494883054661568295458568788L, -0.42187500000000000000000000000000L, -0.09375000000000000000000000000000L,  0.48437500000000000000000000000000L, -0.42790824805091102613825764281313L,  0.18154609435347266649277806561480L,  NAN                                },// k == -1
					{ NAN                                ,  0.36309218870694533298555613122960L,  0.51348989766109323136590917137575L,  0.09375000000000000000000000000000L, -0.43750000000000000000000000000000L, -0.09375000000000000000000000000000L,  0.51348989766109323136590917137575L, -0.36309218870694533298555613122960L,  NAN                                },// k ==  0
					{ NAN                                ,  0.18154609435347266649277806561480L,  0.42790824805091102613825764281313L,  0.48437500000000000000000000000000L,  0.09375000000000000000000000000000L, -0.42187500000000000000000000000000L, -0.25674494883054661568295458568788L,  0.54463828306041799947833419684440L,  NAN                                },// k ==  1
					{ NAN                                ,  0.06629126073623883041257915894733L,  0.21875000000000000000000000000000L,  0.42790824805091102613825764281313L,  0.51348989766109323136590917137575L,  0.25674494883054661568295458568788L, -0.28125000000000000000000000000000L, -0.59662134662614947371321243052597L,  NAN                                },// k ==  2
					{ NAN                                ,  0.01562500000000000000000000000000L,  0.06629126073623883041257915894733L,  0.18154609435347266649277806561480L,  0.36309218870694533298555613122960L,  0.54463828306041799947833419684440L,  0.59662134662614947371321243052597L,  0.42187500000000000000000000000000L,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 4
					{ 0.31640625000000000000000000000000L, -0.51668924261832663008848960950827L,  0.55808816717768707768393457303328L, -0.45567708035680267248979458534994L,  0.29413829057838593483607610281510L, -0.15189236011893422416326486178331L,  0.06200979635307634196488161922592L, -0.01913663861549357889216628183364L,  0.00390625000000000000000000000000L},// k == -4
					{ 0.51668924261832663008848960950827L, -0.42187500000000000000000000000000L,  0.00000000000000000000000000000000L,  0.37205877811845805178928971535552L, -0.48032581715435617421348618814942L,  0.37205877811845805178928971535552L, -0.20252314682524563221768648237775L,  0.07812500000000000000000000000000L, -0.01913663861549357889216628183364L},// k == -3
					{ 0.55808816717768707768393457303328L,  0.00000000000000000000000000000000L, -0.42187500000000000000000000000000L,  0.22963966338592294670599538200368L,  0.22234764798058917178117220234293L, -0.45927932677184589341199076400735L,  0.39062500000000000000000000000000L, -0.20252314682524563221768648237775L,  0.06200979635307634196488161922592L},// k == -2
					{ 0.45567708035680267248979458534994L,  0.37205877811845805178928971535552L, -0.22963966338592294670599538200368L, -0.32812500000000000000000000000000L,  0.30257682392245444415463010935800L,  0.17187500000000000000000000000000L, -0.45927932677184589341199076400735L,  0.37205877811845805178928971535552L, -0.15189236011893422416326486178331L},// k == -1
					{ 0.29413829057838593483607610281510L,  0.48032581715435617421348618814942L,  0.22234764798058917178117220234293L, -0.30257682392245444415463010935800L, -0.28906250000000000000000000000000L,  0.30257682392245444415463010935800L,  0.22234764798058917178117220234293L, -0.48032581715435617421348618814942L,  0.29413829057838593483607610281510L},// k ==  0
					{ 0.15189236011893422416326486178331L,  0.37205877811845805178928971535552L,  0.45927932677184589341199076400735L,  0.17187500000000000000000000000000L, -0.30257682392245444415463010935800L, -0.32812500000000000000000000000000L,  0.22963966338592294670599538200368L,  0.37205877811845805178928971535552L, -0.45567708035680267248979458534994L},// k ==  1
					{ 0.06200979635307634196488161922592L,  0.20252314682524563221768648237775L,  0.39062500000000000000000000000000L,  0.45927932677184589341199076400735L,  0.22234764798058917178117220234293L, -0.22963966338592294670599538200368L, -0.42187500000000000000000000000000L,  0.00000000000000000000000000000000L,  0.55808816717768707768393457303328L},// k ==  2
					{ 0.01913663861549357889216628183364L,  0.07812500000000000000000000000000L,  0.20252314682524563221768648237775L,  0.37205877811845805178928971535552L,  0.48032581715435617421348618814942L,  0.37205877811845805178928971535552L,  0.00000000000000000000000000000000L, -0.42187500000000000000000000000000L, -0.51668924261832663008848960950827L},// k ==  3
					{ 0.00390625000000000000000000000000L,  0.01913663861549357889216628183364L,  0.06200979635307634196488161922592L,  0.15189236011893422416326486178331L,  0.29413829057838593483607610281510L,  0.45567708035680267248979458534994L,  0.55808816717768707768393457303328L,  0.51668924261832663008848960950827L,  0.31640625000000000000000000000000L} // k ==  4
				}
			};

			// \beta = 2 * pi / 3
			long double tab23[Num][2*Num+1][2*Num+1] = {
				{//j == 0
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  1.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L, -0.61237243569579452454932101867647L,  0.75000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.61237243569579452454932101867647L, -0.50000000000000000000000000000000L, -0.61237243569579452454932101867647L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.75000000000000000000000000000000L,  0.61237243569579452454932101867647L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -3
					{ NAN                                ,  NAN                                ,  0.06250000000000000000000000000000L, -0.21650635094610966169093079268823L,  0.45927932677184589341199076400735L, -0.64951905283832898507279237806470L,  0.56250000000000000000000000000000L,  NAN                                ,  NAN                                },// k == -2
					{ NAN                                ,  NAN                                ,  0.21650635094610966169093079268823L, -0.50000000000000000000000000000000L,  0.53033008588991064330063327157864L,  0.00000000000000000000000000000000L, -0.64951905283832898507279237806470L,  NAN                                ,  NAN                                },// k == -1
					{ NAN                                ,  NAN                                ,  0.45927932677184589341199076400735L, -0.53033008588991064330063327157864L, -0.12500000000000000000000000000000L,  0.53033008588991064330063327157864L,  0.45927932677184589341199076400735L,  NAN                                ,  NAN                                },// k ==  0
					{ NAN                                ,  NAN                                ,  0.64951905283832898507279237806470L,  0.00000000000000000000000000000000L, -0.53033008588991064330063327157864L, -0.50000000000000000000000000000000L, -0.21650635094610966169093079268823L,  NAN                                ,  NAN                                },// k ==  1
					{ NAN                                ,  NAN                                ,  0.56250000000000000000000000000000L,  0.64951905283832898507279237806470L,  0.45927932677184589341199076400735L,  0.21650635094610966169093079268823L,  0.06250000000000000000000000000000L,  NAN                                ,  NAN                                },// k ==  2
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },// k == -4
					{ NAN                                ,  0.01562500000000000000000000000000L, -0.06629126073623883041257915894733L,  0.18154609435347266649277806561480L, -0.36309218870694533298555613122960L,  0.54463828306041799947833419684440L, -0.59662134662614947371321243052597L,  0.42187500000000000000000000000000L,  NAN                                },// k == -3
					{ NAN                                ,  0.06629126073623883041257915894733L, -0.21875000000000000000000000000000L,  0.42790824805091102613825764281313L, -0.51348989766109323136590917137575L,  0.25674494883054661568295458568788L,  0.28125000000000000000000000000000L, -0.59662134662614947371321243052597L,  NAN                                },// k == -2
					{ NAN                                ,  0.18154609435347266649277806561480L, -0.42790824805091102613825764281313L,  0.48437500000000000000000000000000L, -0.09375000000000000000000000000000L, -0.42187500000000000000000000000000L,  0.25674494883054661568295458568788L,  0.54463828306041799947833419684440L,  NAN                                },// k == -1
					{ NAN                                ,  0.36309218870694533298555613122960L, -0.51348989766109323136590917137575L,  0.09375000000000000000000000000000L,  0.43750000000000000000000000000000L, -0.09375000000000000000000000000000L, -0.51348989766109323136590917137575L, -0.36309218870694533298555613122960L,  NAN                                },// k ==  0
					{ NAN                                ,  0.54463828306041799947833419684440L, -0.25674494883054661568295458568788L, -0.42187500000000000000000000000000L,  0.09375000000000000000000000000000L,  0.48437500000000000000000000000000L,  0.42790824805091102613825764281313L,  0.18154609435347266649277806561480L,  NAN                                },// k ==  1
					{ NAN                                ,  0.59662134662614947371321243052597L,  0.28125000000000000000000000000000L, -0.25674494883054661568295458568788L, -0.51348989766109323136590917137575L, -0.42790824805091102613825764281313L, -0.21875000000000000000000000000000L, -0.06629126073623883041257915894733L,  NAN                                },// k ==  2
					{ NAN                                ,  0.42187500000000000000000000000000L,  0.59662134662614947371321243052597L,  0.54463828306041799947833419684440L,  0.36309218870694533298555613122960L,  0.18154609435347266649277806561480L,  0.06629126073623883041257915894733L,  0.01562500000000000000000000000000L,  NAN                                },// k ==  3
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                } // k ==  4
				},{//j == 4
					{ 0.00390625000000000000000000000000L, -0.01913663861549357889216628183364L,  0.06200979635307634196488161922592L, -0.15189236011893422416326486178331L,  0.29413829057838593483607610281510L, -0.45567708035680267248979458534994L,  0.55808816717768707768393457303328L, -0.51668924261832663008848960950827L,  0.31640625000000000000000000000000L},// k == -4
					{ 0.01913663861549357889216628183364L, -0.07812500000000000000000000000000L,  0.20252314682524563221768648237775L, -0.37205877811845805178928971535552L,  0.48032581715435617421348618814942L, -0.37205877811845805178928971535552L,  0.00000000000000000000000000000000L,  0.42187500000000000000000000000000L, -0.51668924261832663008848960950827L},// k == -3
					{ 0.06200979635307634196488161922592L, -0.20252314682524563221768648237775L,  0.39062500000000000000000000000000L, -0.45927932677184589341199076400735L,  0.22234764798058917178117220234293L,  0.22963966338592294670599538200368L, -0.42187500000000000000000000000000L,  0.00000000000000000000000000000000L,  0.55808816717768707768393457303328L},// k == -2
					{ 0.15189236011893422416326486178331L, -0.37205877811845805178928971535552L,  0.45927932677184589341199076400735L, -0.17187500000000000000000000000000L, -0.30257682392245444415463010935800L,  0.32812500000000000000000000000000L,  0.22963966338592294670599538200368L, -0.37205877811845805178928971535552L, -0.45567708035680267248979458534994L},// k == -1
					{ 0.29413829057838593483607610281510L, -0.48032581715435617421348618814942L,  0.22234764798058917178117220234293L,  0.30257682392245444415463010935800L, -0.28906250000000000000000000000000L, -0.30257682392245444415463010935800L,  0.22234764798058917178117220234293L,  0.48032581715435617421348618814942L,  0.29413829057838593483607610281510L},// k ==  0
					{ 0.45567708035680267248979458534994L, -0.37205877811845805178928971535552L, -0.22963966338592294670599538200368L,  0.32812500000000000000000000000000L,  0.30257682392245444415463010935800L, -0.17187500000000000000000000000000L, -0.45927932677184589341199076400735L, -0.37205877811845805178928971535552L, -0.15189236011893422416326486178331L},// k ==  1
					{ 0.55808816717768707768393457303328L,  0.00000000000000000000000000000000L, -0.42187500000000000000000000000000L, -0.22963966338592294670599538200368L,  0.22234764798058917178117220234293L,  0.45927932677184589341199076400735L,  0.39062500000000000000000000000000L,  0.20252314682524563221768648237775L,  0.06200979635307634196488161922592L},// k ==  2
					{ 0.51668924261832663008848960950827L,  0.42187500000000000000000000000000L,  0.00000000000000000000000000000000L, -0.37205877811845805178928971535552L, -0.48032581715435617421348618814942L, -0.37205877811845805178928971535552L, -0.20252314682524563221768648237775L, -0.07812500000000000000000000000000L, -0.01913663861549357889216628183364L},// k ==  3
					{ 0.31640625000000000000000000000000L,  0.51668924261832663008848960950827L,  0.55808816717768707768393457303328L,  0.45567708035680267248979458534994L,  0.29413829057838593483607610281510L,  0.15189236011893422416326486178331L,  0.06200979635307634196488161922592L,  0.01913663861549357889216628183364L,  0.00390625000000000000000000000000L} // k ==  4
				}
			};

			//check d^j_{k,m} functions against table
			const Real eps = std::numeric_limits<Real>::epsilon() * 2;
			for(int j = 0; j < Num; j++) {
				for(int k = 1-Num; k < Num; k++) {
					const size_t ik = k + Num-1;// (-Num,Num) ==> [0L,2*Num+1)
					for(int m = 1-Num; m < Num; m++) {
						const size_t im = m + Num-1;// (-Num,Num) ==> [0L,2*Num+1)

						//compute values
						const Real dVals[6] = {
							d<Real>(j, k, m             ),//special function for d^j_{k,m}(  \pi / 2)
							d<Real>(j, k, m,  0.0L, false),//general function for d^j_{k,m}(  \pi / 2)
							d<Real>(j, k, m,  0.5L, false),//general function for d^j_{k,m}(  \pi / 3)
							d<Real>(j, k, m,  0.5L, true ),//general function for d^j_{k,m}(- \pi / 3)
							d<Real>(j, k, m, -0.5L, false),//general function for d^j_{k,m}( 2\pi / 3)
							d<Real>(j, k, m, -0.5L, true ),//general function for d^j_{k,m}(-2\pi / 3)
						};

						//pull values from table
						const Real tVals[6] = {
							static_cast<Real>(tab12[j][ik][im]),
							static_cast<Real>(tab12[j][ik][im]),
							static_cast<Real>(tab13[j][ik][im]),
							static_cast<Real>(tab13[j][im][ik]),//d^j_{ k, m}(-beta) = d^j_{m,k}(beta)
							static_cast<Real>(tab23[j][ik][im]),
							static_cast<Real>(tab23[j][im][ik]),//d^j_{ k, m}(-beta) = d^j_{m,k}(beta)
						};

						//compare values
						for(size_t i = 0; i < 6; i++) {
							if(std::isnan(dVals[i]) && std::isnan(tVals[i])) continue;//both are undefined
							const double delta = std::fabs(dVals[i] - tVals[i]);//compute difference
							if(delta > eps) {
								std::string b;//beta string
								switch(i) {
									case 0: //intentional fall through
									case 1: b =  "Pi/2"; break;
									case 2: b =  "Pi/3"; break;
									case 3: b = "-Pi/3"; break;
									case 4: b =  "2*Pi/3"; break;
									case 5: b = "-2*Pi/3"; break;
								}
								os << "mismatch for d^j_{k,m} with WignerD[{" << j << ", " << k << ", " << m << "}, " << b << "]:\n";
								os << std::setprecision(std::numeric_limits<Real>::digits10);
								os << "\ttable: " << tVals[i] << '\n';
								os << "\tfunc" << i << ": " << dVals[i] << '\n';
								os << "\tdelta: " << delta << '\n';
								os << "\tlimit: " << eps << '\n';
								os.flush();
								return false;
							}
						}
					}
				}
			}

			//check dSign
			for(int j = 0; j < Num; j++) {
				for(int k = 1-Num; k < Num; k++) {
					const size_t ik =          k  + Num-1;// (-Num,Num) ==> [0L,2*Num+1)
					const size_t pk = std::abs(k) + Num-1;// (-Num,Num) ==> [0L,2*Num+1)
					for(int m = 1-Num; m < Num; m++) {
						const size_t im =          m  + Num-1;// (-Num,Num) ==> [0L,2*Num+1)
						const size_t pm = std::abs(m) + Num-1;// (-Num,Num) ==> [0L,2*Num+1)

						//fetch d^j_{k,m} from the table
						const Real vD = static_cast<Real>(tab12[j][ik][im]);

						//fetch d^j_{|k|,|m|} from the table
						const int sgn = dSign(j, k, m);
						const Real vA = static_cast<Real>(tab12[j][pk][pm]) * sgn;

						//check dSign
						if(std::isnan(vD) && std::isnan(vA)) continue;//both are undefined
						if(vD != vA) {
							os << "mismatch for dSign(" << j << ", " << k << ", " << m << ") * d^" << j << "_{|" << k << "|, |" << m << "|} ";
							os << "vs d^" << j << "_{" << k << ", " << m << "}:\n";
							os << "\td^" << j << "_{" << k << ", " << m << "}: " << vD << '\n';
							os << "\tabs * dSign: " << vA << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//check D[{j,k,m},\alpha, \beta, \gamma]
			const Real pi6 = static_cast<Real>(0.52359877559829887307710723054658L);// Pi/6
			const Real pi3 = static_cast<Real>(1.04719755119659774615421446109317L);// Pi/3
			const Real pi2 = static_cast<Real>(1.57079632679489661923132169163975L);// Pi/2
			const std::complex<Real> expPi6(static_cast<Real>(0.86602540378443864676372317075294L), static_cast<Real>(0.50000000000000000000000000000000L));//exp ^ {I * pi / 6L}
			const std::complex<Real> expPi3(static_cast<Real>(0.50000000000000000000000000000000L), static_cast<Real>(0.86602540378443864676372317075294L));//exp ^ {I * pi / 3L}
			const Real eu[3] = {pi3, pi2, pi6};
			const std::complex<Real> d321(static_cast<Real>(0.19764235376052370824993084652704L), static_cast<Real>(-0.34232659844072882091060611425050L));// WignerD[{3L, 2L, 1L}, Pi/6L, Pi/2L, Pi/3]
			const std::complex<Real> res = D<Real>(3L,2L,1L,eu);
			const Real delta = std::abs(d321 - res);
			if(delta > eps) {
				os << "mismatch for D^3_{2L,1L}(pi/3L, pi/2L, pi/6) and WignerD[{3L, 2L, 1L}, Pi/6L, Pi/2L, Pi/3]:\n";
				os << "\tD^3_{2L,1L}(pi/3L, pi/2L, pi/6): " << res << '\n';
				os << "\tWignerD[{3L, 2L, 1L}, Pi/6L, Pi/2L, Pi/3]: " << d321 << '\n';
				os << "\tdelta: " << delta << '\n';
				os << "\tlimit: " << eps << '\n';
				os.flush();
				return false;
			}

			//if we made it this far all tests passed
			return true;
		}

		//@brief   : test all the table functions
		//@param j : max degree in (d/dBeta)^2 d^j_{k,m}(beta)
		//@param os: output stream to write error messages to
		//@return  : true/false if the table functions are consistent with the single point recursive functions
		//@note    : functions tested
		//             -void dTable(const size_t jMax, const Real t, const bool nB, Real * const table)
		//             -void dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB)
		//             -void dTablePreBuild(const size_t jMax, Real * const pE, Real * const pW, Real * const pB)
		//             -void dTable(const size_t jMax, Real * const table, const bool trans = false)
		template <typename Real> bool testTables(const int64_t bw, std::ostream& os) {
			os << "testing wigner d tables\n";

			//allocate lookup table space one
			std::vector<Real> table(size_t(bw * bw * bw * 2));

			//select a random angle that isn't a special point w.r.t. symmetry
			const Real beta = static_cast<Real>(0.9708055194);//pi / 2 / golden ratio
			const Real t = std::cos(beta);

			//test dTable(const size_t bw, const Real t, const bool nB, Real * const table) for nB = false
			dTable((size_t)bw, t, false, table.data());
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dP = d(j, k, m,  t, false);//function evaluation
						const Real  dN = d(j, k, m, -t, false);//function evaluation
						const Real& tP = table[size_t(k * bw * bw + m * bw + j)*2 + 0];//table value
						const Real& tN = table[size_t(k * bw * bw + m * bw + j)*2 + 1];//table value
						const Real pMatch = dP == tP || std::isnan(dP);
						const Real nMatch = dN == tN || std::isnan(dN);
						if(!pMatch || !nMatch) {
							os << "table mismatch for `dTable(const size_t bw, const Real t, const bool nB, Real * const table)'\n";
							os << "with (j,k,m,t) == (" << j << ',' << k << ',' << m << ",+/-" << t << ") and nB == false\n";
							os << "\ttable\tfunction\n";
							os << '\t' << tP << '\t' << dP << "\tpositive t" << '\n';
							os << '\t' << tN << '\t' << dN << "\tnegative t" << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//test dTable(const size_t bw, const Real t, const bool nB, Real * const table) for nB = true
			dTable((size_t)bw, t, true , table.data());
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dP = d(j, k, m,  t, true );//function evaluation
						const Real  dN = d(j, k, m, -t, true );//function evaluation
						const Real& tP = table[size_t(k * bw * bw + m * bw + j)*2 + 0];//table value
						const Real& tN = table[size_t(k * bw * bw + m * bw + j)*2 + 1];//table value
						const Real pMatch = dP == tP || std::isnan(dP);
						const Real nMatch = dN == tN || std::isnan(dN);
						if(!pMatch || !nMatch) {
							os << "table mismatch for `dTable(const size_t bw, const Real t, const bool nB, Real * const table)'\n";
							os << "with (j,k,m,t) == (" << j << ',' << k << ',' << m << ",+/-" << t << ") and nB == true \n";
							os << "\ttable\tfunction\n";
							os << '\t' << tP << '\t' << dP << "\tpositive t" << '\n';
							os << '\t' << tN << '\t' << dN << "\tnegative t" << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//build prefactors for dTablePre
			std::vector<Real> pE(size_t(bw * bw * bw)), pW(size_t(bw * bw * bw)), pB(size_t(bw * bw * bw));
			dTablePreBuild((size_t)bw, pE.data(), pW.data(), pB.data());

			//test dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB) for nB = false
			dTablePre((size_t)bw, t, false, table.data(), pE.data(), pW.data(), pB.data());
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dP = d(j, k, m,  t, false);//function evaluation
						const Real  dN = d(j, k, m, -t, false);//function evaluation
						const Real& tP = table[size_t(k * bw * bw + m * bw + j)*2 + 0];//table value
						const Real& tN = table[size_t(k * bw * bw + m * bw + j)*2 + 1];//table value
						const Real pMatch = dP == tP || std::isnan(dP);
						const Real nMatch = dN == tN || std::isnan(dN);
						if(!pMatch || !nMatch) {
							os << "table mismatch for `dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB)'\n";
							os << "with (j,k,m,t) == (" << j << ',' << k << ',' << m << ",+/-" << t << ") and nB == false\n";
							os << "\ttable\tfunction\n";
							os << '\t' << tP << '\t' << dP << "\tpositive t" << '\n';
							os << '\t' << tN << '\t' << dN << "\tnegative t" << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//test dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB) for nB = true
			dTablePre((size_t)bw, t, true , table.data(), pE.data(), pW.data(), pB.data());
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dP = d(j, k, m,  t, true );//function evaluation
						const Real  dN = d(j, k, m, -t, true );//function evaluation
						const Real& tP = table[size_t(k * bw * bw + m * bw + j)*2 + 0];//table value
						const Real& tN = table[size_t(k * bw * bw + m * bw + j)*2 + 1];//table value
						const Real pMatch = dP == tP || std::isnan(dP);
						const Real nMatch = dN == tN || std::isnan(dN);
						if(!pMatch || !nMatch) {
							os << "table mismatch for `dTablePre(const size_t jMax, const Real t, const bool nB, Real * const table, Real const * const pE, Real const * const pW, Real const * const pB)'\n";
							os << "with (j,k,m,t) == (" << j << ',' << k << ',' << m << ",+/-" << t << ") and nB == true \n";
							os << "\ttable\tfunction\n";
							os << '\t' << tP << '\t' << dP << "\tpositive t" << '\n';
							os << '\t' << tN << '\t' << dN << "\tnegative t" << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//test dTable(const size_t jMax, Real * const table, const bool trans = false); for trans = false
			dTable((size_t)bw, table.data(), false);
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dV = d<Real>(j, k, m);//function evaluation
						const Real& tV = table[size_t(k * bw * bw + m * bw + j)];//table value
						if(dV != tV && !std::isnan(dV)) {
							os << "table mismatch for `dTable(const size_t jMax, Real * const table, const bool trans = false)'\n";
							os << "with (j,k,m) == (" << j << ',' << k << ',' << m << ") and trans == false\n";
							os << "\ttable\tfunction\n";
							os << '\t' << tV << '\t' << dV << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//test dTable(const size_t jMax, Real * const table, const bool trans = false); for trans = true
			dTable((size_t)bw, table.data(), true );
			for(int64_t k = 0; k < bw; k++) {
				for(int64_t m = 0; m < bw; m++) {
					for(int64_t j = 0; j < bw; j++) {
						const Real  dV = d<Real>(j, k, m);//function evaluation
						const Real& tV = table[size_t(m * bw * bw + k * bw + j)];//table value
						if(dV != tV && !std::isnan(dV)) {
							os << "table mismatch for `dTable(const size_t jMax, Real * const table, const bool trans = false)'\n";
							os << "with (j,k,m) == (" << j << ',' << k << ',' << m << ") and trans == false\n";
							os << "\ttable\tfunction\n";
							os << '\t' << tV << '\t' << dV << '\n';
							os.flush();
							return false;
						}
					}
				}
			}

			//if we made it this far all table tests passed
			return true;
		}

		//@brief   : test functions for derivatives of d^j_{k,m}(\beta)
		//@param os: output stream to write error messages to
		//@return  : true/false if the functions are consistent with precomputed values from mathematica's D[WignerD[{j,k,m},\beta],{\beta, (1 or 2)}]
		//@note    : functions tested
		//             -Real dPrime(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB);
		//             -Real dPrime2(const int64_t j, const int64_t k, const int64_t m, const Real t, const bool nB);
		template <typename Real> bool testDerivatives(std::ostream& os) {
			os << "testing wigner d derivatives\n";

		//start by tabulating some values from mathematica
			//these are from mathematica:
			//Table[If[Max[Abs[k], Abs[m]] > j, NAN, D[WignerD[{j, k, m}, beta], {beta, 1L}]], {j, 0L, x}, {k, -x, x}, {m, -x, x}]
			// where x == Num-1
			const int Num = 5;//table size

			// first derivative for \beta = pi / 3
			long double tab13_1[Num][2*Num+1][2*Num+1] = { // j, k, m with j in [0L,Num) and k/m in (-Num,Num)
				{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.43301270189221932338186158537647L, -0.35355339059327376220042218105242L,  0.43301270189221932338186158537647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.35355339059327376220042218105242L, -0.86602540378443864676372317075294L, -0.35355339059327376220042218105242L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.43301270189221932338186158537647L,  0.35355339059327376220042218105242L, -0.43301270189221932338186158537647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.64951905283832898507279237806470L,  0.00000000000000000000000000000000L,  0.53033008588991064330063327157864L, -0.50000000000000000000000000000000L,  0.21650635094610966169093079268823L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L, -1.29903810567665797014558475612940L,  0.61237243569579452454932101867647L,  0.43301270189221932338186158537647L, -0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.53033008588991064330063327157864L, -0.61237243569579452454932101867647L, -1.29903810567665797014558475612940L,  0.61237243569579452454932101867647L,  0.53033008588991064330063327157864L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L,  0.43301270189221932338186158537647L, -0.61237243569579452454932101867647L, -1.29903810567665797014558475612940L,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.21650635094610966169093079268823L,  0.50000000000000000000000000000000L,  0.53033008588991064330063327157864L,  0.00000000000000000000000000000000L, -0.64951905283832898507279237806470L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                , -0.73070893444312010820689142532279L,  0.34445949507888442005899307300552L,  0.31444705933590792605754004716534L, -0.62889411867181585211508009433067L,  0.52407843222651321009590007860889L, -0.26791294061691010449032794567096L,  0.08118988160479112313409904725809L,  NAN                                },
					{ NAN                                , -0.34445949507888442005899307300552L, -1.13665834246707572387738666161320L,  1.33408588788353503068703321405760L, -0.29646353064078556237489626979057L, -0.54351647284144019768730982794937L,  0.59539246510180156965005967989264L, -0.26791294061691010449032794567096L,  NAN                                },
					{ NAN                                ,  0.31444705933590792605754004716534L, -1.33408588788353503068703321405760L, -0.56832917123353786193869333080661L,  1.56967104435929504725924824698970L, -0.51420258349701044651596063263456L, -0.54351647284144019768730982794937L,  0.52407843222651321009590007860889L,  NAN                                },
					{ NAN                                ,  0.62889411867181585211508009433067L, -0.29646353064078556237489626979057L, -1.56967104435929504725924824698970L, -0.32475952641916449253639618903235L,  1.56967104435929504725924824698970L, -0.29646353064078556237489626979057L, -0.62889411867181585211508009433067L,  NAN                                },
					{ NAN                                ,  0.52407843222651321009590007860889L,  0.54351647284144019768730982794937L, -0.51420258349701044651596063263456L, -1.56967104435929504725924824698970L, -0.56832917123353786193869333080661L,  1.33408588788353503068703321405760L,  0.31444705933590792605754004716534L,  NAN                                },
					{ NAN                                ,  0.26791294061691010449032794567096L,  0.59539246510180156965005967989264L,  0.54351647284144019768730982794937L, -0.29646353064078556237489626979057L, -1.33408588788353503068703321405760L, -1.13665834246707572387738666161320L,  0.34445949507888442005899307300552L,  NAN                                },
					{ NAN                                ,  0.08118988160479112313409904725809L,  0.26791294061691010449032794567096L,  0.52407843222651321009590007860889L,  0.62889411867181585211508009433067L,  0.31444705933590792605754004716534L, -0.34445949507888442005899307300552L, -0.73070893444312010820689142532279L,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{-0.73070893444312010820689142532279L,  0.59662134662614947371321243052597L,  0.00000000000000000000000000000000L, -0.52617057001508550734771466548201L,  0.67928328497762993314306238236733L, -0.52617057001508550734771466548201L,  0.28641098093474000041175294960800L, -0.11048543456039805068763193157888L,  0.02706329386826370771136634908603L},
					{-0.59662134662614947371321243052597L, -0.73070893444312010820689142532279L,  1.57851171004525652204314399644600L, -1.07404117850527500154407356103000L,  0.00000000000000000000000000000000L,  0.64442470710316500092644413661800L, -0.64309736335177117564720681336691L,  0.35182282028742820024776253811838L, -0.11048543456039805068763193157888L},
					{ 0.00000000000000000000000000000000L, -1.57851171004525652204314399644600L,  0.48713928962874673880459428354853L,  1.39211647546101543866416233789390L, -1.54046969298327969409772751412730L,  0.33145630368119415206289579473665L,  0.59539246510180156965005967989264L, -0.64309736335177117564720681336691L,  0.28641098093474000041175294960800L},
					{ 0.52617057001508550734771466548201L, -1.07404117850527500154407356103000L, -1.39211647546101543866416233789390L,  1.16372163633533943158875301069930L,  1.11803398874989484820458683436560L, -1.65086092596408617039334729424780L,  0.33145630368119415206289579473665L,  0.64442470710316500092644413661800L, -0.52617057001508550734771466548201L},
					{ 0.67928328497762993314306238236733L,  0.00000000000000000000000000000000L, -1.54046969298327969409772751412730L, -1.11803398874989484820458683436560L,  1.35316469341318538556831745430150L,  1.11803398874989484820458683436560L, -1.54046969298327969409772751412730L,  0.00000000000000000000000000000000L,  0.67928328497762993314306238236733L},
					{ 0.52617057001508550734771466548201L,  0.64442470710316500092644413661800L, -0.33145630368119415206289579473665L, -1.65086092596408617039334729424780L, -1.11803398874989484820458683436560L,  1.16372163633533943158875301069930L,  1.39211647546101543866416233789390L, -1.07404117850527500154407356103000L, -0.52617057001508550734771466548201L},
					{ 0.28641098093474000041175294960800L,  0.64309736335177117564720681336691L,  0.59539246510180156965005967989264L, -0.33145630368119415206289579473665L, -1.54046969298327969409772751412730L, -1.39211647546101543866416233789390L,  0.48713928962874673880459428354853L,  1.57851171004525652204314399644600L,  0.00000000000000000000000000000000L},
					{ 0.11048543456039805068763193157888L,  0.35182282028742820024776253811838L,  0.64309736335177117564720681336691L,  0.64442470710316500092644413661800L,  0.00000000000000000000000000000000L, -1.07404117850527500154407356103000L, -1.57851171004525652204314399644600L, -0.73070893444312010820689142532279L,  0.59662134662614947371321243052597L},
					{ 0.02706329386826370771136634908603L,  0.11048543456039805068763193157888L,  0.28641098093474000041175294960800L,  0.52617057001508550734771466548201L,  0.67928328497762993314306238236733L,  0.52617057001508550734771466548201L,  0.00000000000000000000000000000000L, -0.59662134662614947371321243052597L, -0.73070893444312010820689142532279L}
				}
			};

			// first derivative for \beta = 2 * pi / 3
			long double tab23_1[Num][2*Num+1][2*Num+1] = {
				{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.43301270189221932338186158537647L,  0.35355339059327376220042218105242L,  0.43301270189221932338186158537647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.35355339059327376220042218105242L, -0.86602540378443864676372317075294L,  0.35355339059327376220042218105242L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.43301270189221932338186158537647L, -0.35355339059327376220042218105242L, -0.43301270189221932338186158537647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.21650635094610966169093079268823L,  0.50000000000000000000000000000000L, -0.53033008588991064330063327157864L,  0.00000000000000000000000000000000L,  0.64951905283832898507279237806470L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.50000000000000000000000000000000L,  0.43301270189221932338186158537647L,  0.61237243569579452454932101867647L, -1.29903810567665797014558475612940L,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.53033008588991064330063327157864L, -0.61237243569579452454932101867647L,  1.2990381056766579701455847561294L,  0.612372435695794524549321018676470L, -0.53033008588991064330063327157864L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L, -1.2990381056766579701455847561294L, -0.61237243569579452454932101867647L,  0.433012701892219323381861585376470L,  0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.64951905283832898507279237806470L,  0.00000000000000000000000000000000L, -0.53033008588991064330063327157864L, -0.50000000000000000000000000000000L, -0.21650635094610966169093079268823L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                , -0.08118988160479112313409904725809L,  0.26791294061691010449032794567096L, -0.52407843222651321009590007860889L,  0.62889411867181585211508009433067L, -0.31444705933590792605754004716534L, -0.34445949507888442005899307300552L,  0.73070893444312010820689142532279L,  NAN                                },
					{ NAN                                , -0.26791294061691010449032794567096L,  0.59539246510180156965005967989264L, -0.54351647284144019768730982794937L, -0.29646353064078556237489626979057L,  1.33408588788353503068703321405760L, -1.13665834246707572387738666161320L, -0.34445949507888442005899307300552L,  NAN                                },
					{ NAN                                , -0.52407843222651321009590007860889L,  0.54351647284144019768730982794937L,  0.51420258349701044651596063263456L, -1.56967104435929504725924824698970L,  0.56832917123353786193869333080661L,  1.33408588788353503068703321405760L, -0.31444705933590792605754004716534L,  NAN                                },
					{ NAN                                , -0.62889411867181585211508009433067L, -0.29646353064078556237489626979057L,  1.56967104435929504725924824698970L, -0.32475952641916449253639618903235L, -1.56967104435929504725924824698970L, -0.29646353064078556237489626979057L,  0.62889411867181585211508009433067L,  NAN                                },
					{ NAN                                , -0.31444705933590792605754004716534L, -1.33408588788353503068703321405760L,  0.56832917123353786193869333080661L,  1.56967104435929504725924824698970L,  0.51420258349701044651596063263456L, -0.54351647284144019768730982794937L, -0.52407843222651321009590007860889L,  NAN                                },
					{ NAN                                ,  0.34445949507888442005899307300552L, -1.13665834246707572387738666161320L, -1.33408588788353503068703321405760L, -0.29646353064078556237489626979057L,  0.54351647284144019768730982794937L,  0.59539246510180156965005967989264L,  0.26791294061691010449032794567096L,  NAN                                },
					{ NAN                                ,  0.73070893444312010820689142532279L,  0.34445949507888442005899307300552L, -0.31444705933590792605754004716534L, -0.62889411867181585211508009433067L, -0.52407843222651321009590007860889L, -0.26791294061691010449032794567096L, -0.08118988160479112313409904725809L,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{-0.02706329386826370771136634908603L,  0.11048543456039805068763193157888L, -0.28641098093474000041175294960800L,  0.52617057001508550734771466548201L, -0.67928328497762993314306238236733L,  0.52617057001508550734771466548201L,  0.00000000000000000000000000000000L, -0.59662134662614947371321243052597L,  0.73070893444312010820689142532279L},
					{-0.11048543456039805068763193157888L,  0.35182282028742820024776253811838L, -0.64309736335177117564720681336691L,  0.64442470710316500092644413661800L,  0.00000000000000000000000000000000L, -1.07404117850527500154407356103000L,  1.57851171004525652204314399644600L, -0.73070893444312010820689142532279L, -0.59662134662614947371321243052597L},
					{-0.28641098093474000041175294960800L,  0.64309736335177117564720681336691L, -0.59539246510180156965005967989264L, -0.33145630368119415206289579473665L,  1.54046969298327969409772751412730L, -1.39211647546101543866416233789390L, -0.48713928962874673880459428354853L,  1.57851171004525652204314399644600L,  0.00000000000000000000000000000000L},
					{-0.52617057001508550734771466548201L,  0.64442470710316500092644413661800L,  0.33145630368119415206289579473665L, -1.65086092596408617039334729424780L,  1.11803398874989484820458683436560L,  1.16372163633533943158875301069930L, -1.39211647546101543866416233789390L, -1.07404117850527500154407356103000L,  0.52617057001508550734771466548201L},
					{-0.67928328497762993314306238236733L,  0.00000000000000000000000000000000L,  1.54046969298327969409772751412730L, -1.11803398874989484820458683436560L, -1.35316469341318538556831745430150L,  1.11803398874989484820458683436560L,  1.54046969298327969409772751412730L,  0.00000000000000000000000000000000L, -0.67928328497762993314306238236733L},
					{-0.52617057001508550734771466548201L, -1.07404117850527500154407356103000L,  1.39211647546101543866416233789390L,  1.16372163633533943158875301069930L, -1.11803398874989484820458683436560L, -1.65086092596408617039334729424780L, -0.33145630368119415206289579473665L,  0.64442470710316500092644413661800L,  0.52617057001508550734771466548201L},
					{ 0.00000000000000000000000000000000L, -1.57851171004525652204314399644600L, -0.48713928962874673880459428354853L,  1.39211647546101543866416233789390L,  1.54046969298327969409772751412730L,  0.33145630368119415206289579473665L, -0.59539246510180156965005967989264L, -0.64309736335177117564720681336691L, -0.28641098093474000041175294960800L},
					{ 0.59662134662614947371321243052597L, -0.73070893444312010820689142532279L, -1.57851171004525652204314399644600L, -1.07404117850527500154407356103000L,  0.00000000000000000000000000000000L,  0.64442470710316500092644413661800L,  0.64309736335177117564720681336691L,  0.35182282028742820024776253811838L,  0.11048543456039805068763193157888L},
					{ 0.73070893444312010820689142532279L,  0.59662134662614947371321243052597L,  0.00000000000000000000000000000000L, -0.52617057001508550734771466548201L, -0.67928328497762993314306238236733L, -0.52617057001508550734771466548201L, -0.28641098093474000041175294960800L, -0.11048543456039805068763193157888L, -0.02706329386826370771136634908603L}
				}
			};

			// second derivative for \beta = pi / 3
			long double tab13_2[Num][2*Num+1][2*Num+1] = {
				{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.25000000000000000000000000000000L,  0.61237243569579452454932101867647L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.61237243569579452454932101867647L, -0.50000000000000000000000000000000L,  0.61237243569579452454932101867647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L, -0.61237243569579452454932101867647L, -0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L,  1.29903810567665797014558475612940L, -0.61237243569579452454932101867647L, -0.43301270189221932338186158537647L,  0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -1.29903810567665797014558475612940L,  0.75000000000000000000000000000000L,  2.12132034355964257320253308631450L, -1.25000000000000000000000000000000L, -0.43301270189221932338186158537647L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.61237243569579452454932101867647L, -2.12132034355964257320253308631450L,  1.50000000000000000000000000000000L,  2.12132034355964257320253308631450L, -0.61237243569579452454932101867647L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.43301270189221932338186158537647L, -1.25000000000000000000000000000000L, -2.12132034355964257320253308631450L,  0.75000000000000000000000000000000L,  1.29903810567665797014558475612940L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L,  0.43301270189221932338186158537647L, -0.61237243569579452454932101867647L, -1.29903810567665797014558475612940L,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  0.42187500000000000000000000000000L,  1.39211647546101543866416233789390L, -1.63391484918125399843500259053320L,  0.36309218870694533298555613122960L,  0.66566901262939977714018624058760L, -0.72920386809862713453837074842063L,  0.32812500000000000000000000000000L,  NAN                                },
					{ NAN                                , -1.39211647546101543866416233789390L,  2.53125000000000000000000000000000L,  1.28372474415273307841477292843940L, -3.25210268518692379865075808537980L,  1.45488804337309748887007598556460L,  0.53125000000000000000000000000000L, -0.72920386809862713453837074842063L,  NAN                                },
					{ NAN                                , -1.63391484918125399843500259053320L, -1.28372474415273307841477292843940L,  4.82812500000000000000000000000000L,  0.09375000000000000000000000000000L, -3.57812500000000000000000000000000L,  1.45488804337309748887007598556460L,  0.66566901262939977714018624058760L,  NAN                                },
					{ NAN                                , -0.36309218870694533298555613122960L, -3.25210268518692379865075808537980L, -0.09375000000000000000000000000000L,  5.43750000000000000000000000000000L,  0.09375000000000000000000000000000L, -3.25210268518692379865075808537980L,  0.36309218870694533298555613122960L,  NAN                                },
					{ NAN                                ,  0.66566901262939977714018624058760L, -1.45488804337309748887007598556460L, -3.57812500000000000000000000000000L, -0.09375000000000000000000000000000L,  4.82812500000000000000000000000000L,  1.28372474415273307841477292843940L, -1.63391484918125399843500259053320L,  NAN                                },
					{ NAN                                ,  0.72920386809862713453837074842063L,  0.53125000000000000000000000000000L, -1.45488804337309748887007598556460L, -3.25210268518692379865075808537980L, -1.28372474415273307841477292843940L,  2.53125000000000000000000000000000L,  1.39211647546101543866416233789390L,  NAN                                },
					{ NAN                                ,  0.32812500000000000000000000000000L,  0.72920386809862713453837074842063L,  0.66566901262939977714018624058760L, -0.36309218870694533298555613122960L, -1.63391484918125399843500259053320L, -1.39211647546101543866416233789390L,  0.42187500000000000000000000000000L,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ 0.84375000000000000000000000000000L,  1.03337848523665326017697921901650L, -2.23235266871074831073573829213310L,  1.51892360118934224163264861783310L,  0.00000000000000000000000000000000L, -0.91135416071360534497958917069987L,  0.90947701317845301548493041531350L, -0.49755260400283305119632332767463L,  0.15625000000000000000000000000000L},
					{-1.03337848523665326017697921901650L,  3.79687500000000000000000000000000L, -0.91135416071360534497958917069987L, -3.34852900306612246610360743819970L,  3.84260653723484939370788950519540L, -1.36421551976767952322739562297020L, -0.70883101388835971276190268832212L,  1.04687500000000000000000000000000L, -0.49755260400283305119632332767463L},
					{-2.23235266871074831073573829213310L,  0.91135416071360534497958917069987L,  5.90625000000000000000000000000000L, -4.47797343602549746076690994907170L, -2.37170824512628449899917015832450L,  4.70761309941142040747290533107540L, -1.90625000000000000000000000000000L, -0.70883101388835971276190268832212L,  0.90947701317845301548493041531350L},
					{-1.51892360118934224163264861783310L, -3.34852900306612246610360743819970L,  4.47797343602549746076690994907170L,  5.45312500000000000000000000000000L, -6.29359793758705243841630627464640L, -1.79687500000000000000000000000000L,  4.70761309941142040747290533107540L, -1.36421551976767952322739562297020L, -0.91135416071360534497958917069987L},
					{ 0.00000000000000000000000000000000L, -3.84260653723484939370788950519540L, -2.37170824512628449899917015832450L,  6.29359793758705243841630627464640L,  5.00000000000000000000000000000000L, -6.29359793758705243841630627464640L, -2.37170824512628449899917015832450L,  3.84260653723484939370788950519540L,  0.00000000000000000000000000000000L},
					{ 0.91135416071360534497958917069987L, -1.36421551976767952322739562297020L, -4.70761309941142040747290533107540L, -1.79687500000000000000000000000000L,  6.29359793758705243841630627464640L,  5.45312500000000000000000000000000L, -4.47797343602549746076690994907170L, -3.34852900306612246610360743819970L,  1.51892360118934224163264861783310L},
					{ 0.90947701317845301548493041531350L,  0.70883101388835971276190268832212L, -1.90625000000000000000000000000000L, -4.70761309941142040747290533107540L, -2.37170824512628449899917015832450L,  4.47797343602549746076690994907170L,  5.90625000000000000000000000000000L, -0.91135416071360534497958917069987L, -2.23235266871074831073573829213310L},
					{ 0.49755260400283305119632332767463L,  1.04687500000000000000000000000000L,  0.70883101388835971276190268832212L, -1.36421551976767952322739562297020L, -3.84260653723484939370788950519540L, -3.34852900306612246610360743819970L,  0.91135416071360534497958917069987L,  3.79687500000000000000000000000000L,  1.03337848523665326017697921901650L},
					{ 0.15625000000000000000000000000000L,  0.49755260400283305119632332767463L,  0.90947701317845301548493041531350L,  0.91135416071360534497958917069987L,  0.00000000000000000000000000000000L, -1.51892360118934224163264861783310L, -2.23235266871074831073573829213310L, -1.03337848523665326017697921901650L,  0.84375000000000000000000000000000L}
				}
			};

			// second derivative for \beta = 2 * pi / 3
			long double tab23_2[Num][2*Num+1][2*Num+1] = {
				{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  0.25000000000000000000000000000000L,  0.61237243569579452454932101867647L, -0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.61237243569579452454932101867647L,  0.50000000000000000000000000000000L,  0.61237243569579452454932101867647L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                , -0.25000000000000000000000000000000L, -0.61237243569579452454932101867647L,  0.25000000000000000000000000000000L,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.50000000000000000000000000000000L, -0.43301270189221932338186158537647L, -0.61237243569579452454932101867647L,  1.29903810567665797014558475612940L,  0.00000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.43301270189221932338186158537647L,  1.25000000000000000000000000000000L, -2.12132034355964257320253308631450L, -0.75000000000000000000000000000000L,  1.29903810567665797014558475612940L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -0.61237243569579452454932101867647L,  2.12132034355964257320253308631450L,  1.50000000000000000000000000000000L, -2.12132034355964257320253308631450L, -0.61237243569579452454932101867647L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                , -1.29903810567665797014558475612940L, -0.75000000000000000000000000000000L,  2.12132034355964257320253308631450L,  1.25000000000000000000000000000000L, -0.43301270189221932338186158537647L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  0.00000000000000000000000000000000L, -1.29903810567665797014558475612940L, -0.61237243569579452454932101867647L,  0.43301270189221932338186158537647L,  0.50000000000000000000000000000000L,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                },
					{ NAN                                ,  0.32812500000000000000000000000000L, -0.72920386809862713453837074842063L,  0.66566901262939977714018624058760L,  0.36309218870694533298555613122960L, -1.63391484918125399843500259053320L,  1.39211647546101543866416233789390L,  0.42187500000000000000000000000000L,  NAN                                },
					{ NAN                                ,  0.72920386809862713453837074842063L, -0.53125000000000000000000000000000L, -1.45488804337309748887007598556460L,  3.25210268518692379865075808537980L, -1.28372474415273307841477292843940L, -2.53125000000000000000000000000000L,  1.39211647546101543866416233789390L,  NAN                                },
					{ NAN                                ,  0.66566901262939977714018624058760L,  1.45488804337309748887007598556460L, -3.57812500000000000000000000000000L,  0.09375000000000000000000000000000L,  4.82812500000000000000000000000000L, -1.28372474415273307841477292843940L, -1.63391484918125399843500259053320L,  NAN                                },
					{ NAN                                , -0.36309218870694533298555613122960L,  3.25210268518692379865075808537980L, -0.09375000000000000000000000000000L, -5.43750000000000000000000000000000L,  0.09375000000000000000000000000000L,  3.25210268518692379865075808537980L,  0.36309218870694533298555613122960L,  NAN                                },
					{ NAN                                , -1.63391484918125399843500259053320L,  1.28372474415273307841477292843940L,  4.82812500000000000000000000000000L, -0.09375000000000000000000000000000L, -3.57812500000000000000000000000000L, -1.45488804337309748887007598556460L,  0.66566901262939977714018624058760L,  NAN                                },
					{ NAN                                , -1.39211647546101543866416233789390L, -2.53125000000000000000000000000000L,  1.28372474415273307841477292843940L,  3.25210268518692379865075808537980L,  1.45488804337309748887007598556460L, -0.53125000000000000000000000000000L, -0.72920386809862713453837074842063L,  NAN                                },
					{ NAN                                ,  0.42187500000000000000000000000000L, -1.39211647546101543866416233789390L, -1.63391484918125399843500259053320L, -0.36309218870694533298555613122960L,  0.66566901262939977714018624058760L,  0.72920386809862713453837074842063L,  0.32812500000000000000000000000000L,  NAN                                },
					{ NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                ,  NAN                                }
				},{
					{ 0.15625000000000000000000000000000L, -0.49755260400283305119632332767463L,  0.90947701317845301548493041531350L, -0.91135416071360534497958917069987L,  0.00000000000000000000000000000000L,  1.51892360118934224163264861783310L, -2.23235266871074831073573829213310L,  1.03337848523665326017697921901650L,  0.84375000000000000000000000000000L},
					{ 0.49755260400283305119632332767463L, -1.04687500000000000000000000000000L,  0.70883101388835971276190268832212L,  1.36421551976767952322739562297020L, -3.84260653723484939370788950519540L,  3.34852900306612246610360743819970L,  0.91135416071360534497958917069987L, -3.79687500000000000000000000000000L,  1.03337848523665326017697921901650L},
					{ 0.90947701317845301548493041531350L, -0.70883101388835971276190268832212L, -1.90625000000000000000000000000000L,  4.70761309941142040747290533107540L, -2.37170824512628449899917015832450L, -4.47797343602549746076690994907170L,  5.90625000000000000000000000000000L,  0.91135416071360534497958917069987L, -2.23235266871074831073573829213310L},
					{ 0.91135416071360534497958917069987L,  1.36421551976767952322739562297020L, -4.70761309941142040747290533107540L,  1.79687500000000000000000000000000L,  6.29359793758705243841630627464640L, -5.45312500000000000000000000000000L, -4.47797343602549746076690994907170L,  3.34852900306612246610360743819970L,  1.51892360118934224163264861783310L},
					{ 0.00000000000000000000000000000000L,  3.84260653723484939370788950519540L, -2.37170824512628449899917015832450L, -6.29359793758705243841630627464640L,  5.00000000000000000000000000000000L,  6.29359793758705243841630627464640L, -2.37170824512628449899917015832450L, -3.84260653723484939370788950519540L,  0.00000000000000000000000000000000L},
					{-1.51892360118934224163264861783310L,  3.34852900306612246610360743819970L,  4.47797343602549746076690994907170L, -5.45312500000000000000000000000000L, -6.29359793758705243841630627464640L,  1.79687500000000000000000000000000L,  4.70761309941142040747290533107540L,  1.36421551976767952322739562297020L, -0.91135416071360534497958917069987L},
					{-2.23235266871074831073573829213310L, -0.91135416071360534497958917069987L,  5.90625000000000000000000000000000L,  4.47797343602549746076690994907170L, -2.37170824512628449899917015832450L, -4.70761309941142040747290533107540L, -1.90625000000000000000000000000000L,  0.70883101388835971276190268832212L,  0.90947701317845301548493041531350L},
					{-1.03337848523665326017697921901650L, -3.79687500000000000000000000000000L, -0.91135416071360534497958917069987L,  3.34852900306612246610360743819970L,  3.84260653723484939370788950519540L,  1.36421551976767952322739562297020L, -0.70883101388835971276190268832212L, -1.04687500000000000000000000000000L, -0.49755260400283305119632332767463L},
					{ 0.84375000000000000000000000000000L, -1.03337848523665326017697921901650L, -2.23235266871074831073573829213310L, -1.51892360118934224163264861783310L,  0.00000000000000000000000000000000L,  0.91135416071360534497958917069987L,  0.90947701317845301548493041531350L,  0.49755260400283305119632332767463L,  0.15625000000000000000000000000000L}
				}
			};

			//check derivative functions against table
			const Real eps = std::numeric_limits<Real>::epsilon() * 24;
			for(int j = 0; j < Num; j++) {
				for(int k = 1-Num; k < Num; k++) {
					const size_t ik = k + Num-1;// (-Num,Num) ==> [0L,2*Num+1)
					const size_t nk = Num-1 - k;
					for(int m = 1-Num; m < Num; m++) {
						const size_t im = m + Num-1;// (-Num,Num) ==> [0L,2*Num+1)

						//compute values
						const Real dVals[8] = {
							dPrime <Real>(j, k, m, 0.5L, false),//    pi/3
							dPrime <Real>(j, k, m,-0.5L, false),//  2*pi/3
							dPrime2<Real>(j, k, m, 0.5L, false),//    pi/3
							dPrime2<Real>(j, k, m,-0.5L, false),//  2*pi/3

							dPrime <Real>(j, k, m, 0.5L, true ),// -  pi/3
							dPrime <Real>(j, k, m,-0.5L, true ),// -2*pi/3
							dPrime2<Real>(j, k, m, 0.5L, true ),// -  pi/3
							dPrime2<Real>(j, k, m,-0.5L, true ),// -2*pi/3
						};

						//pull values from table
						const Real neg = Real(0 == (std::abs(m) + std::abs(k) + 1) % 2 ? 1 : -1);
						const Real tVals[8] = {
							static_cast<Real>(tab13_1[j][ik][im])       ,
							static_cast<Real>(tab23_1[j][ik][im])       ,
							static_cast<Real>(tab13_2[j][ik][im])       ,
							static_cast<Real>(tab23_2[j][ik][im])       ,
							static_cast<Real>(tab13_1[j][ik][im]) *  neg,//d^j_{ k, m}(-beta) = d^j_{m,k}(beta)
							static_cast<Real>(tab23_1[j][ik][im]) *  neg,//d^j_{ k, m}(-beta) = d^j_{m,k}(beta)
							static_cast<Real>(tab13_2[j][ik][im]) * -neg,
							static_cast<Real>(tab23_2[j][ik][im]) * -neg,
						};

						//compare values
						for(size_t i = 0; i < 8; i++) {
							if(std::isnan(dVals[i]) && std::isnan(tVals[i])) continue;//both are undefined
							const double delta = std::fabs(dVals[i] - tVals[i]);//compute difference
							if(delta > eps) {
								std::string b;//beta string
								switch(i) {
									case 0: //intentional fall through
									case 2: b =  "Pi/3"; break;
									case 1: //intentional fall through
									case 3: b = "2*Pi/3"; break;
									case 4: //intentional fall through
									case 6: b = "-Pi/3"; break;
									case 5: //intentional fall through
									case 7: b = "-2*Pi/3"; break;
								}

								char d = '1';//derivative string
								switch(i) {
									case 2:
									case 3:
									case 6:
									case 7: d = '2'; break;
								}

								os << "mismatch for d^j_{k,m} derivative with D[WignerD[{" << j << ", " << k << ", " << m << "}, " << b << "], {\\beta, " << d << "}]:\n";
								os << std::setprecision(std::numeric_limits<Real>::digits10);
								os << "\ttable: " << tVals[i] << '\n';
								os << "\tfunc" << i << ": " << dVals[i] << '\n';
								os << "\tdelta: " << delta << '\n';
								os << "\tlimit: " << eps << '\n';
								os.flush();
								return false;
							}
						}
					}
				}
			}

			//if we made it this far all the tests passed
			return true;

		}

		//@brief   : run unit tests for all function in this header
		//@param os: output stream to write error messages to
		//@return  : true/false if the self tests pass/fail
		//@note    : there isn't currently a unit test for rotateHarmonics
		template <typename Real> bool runTests(std::ostream& os) {
			return testDjkm<Real>(os) && testTables<Real>(15L, os) && testDerivatives<Real>(os);
		}
	}

}
